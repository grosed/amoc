// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_error_pred_seg_VAR1
Rcpp::List rcpp_error_pred_seg_VAR1(const arma::mat& X_futu, const arma::mat& X_curr, int s, int e, const arma::vec& lambda, int delta, double eps);
RcppExport SEXP _amoc_rcpp_error_pred_seg_VAR1(SEXP X_futuSEXP, SEXP X_currSEXP, SEXP sSEXP, SEXP eSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_futu(X_futuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_curr(X_currSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_error_pred_seg_VAR1(X_futu, X_curr, s, e, lambda, delta, eps));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_DP_VAR1
Rcpp::List rcpp_DP_VAR1(const arma::mat& X_futu, const arma::mat& X_curr, double gamma, const arma::vec& lambda, int delta, double eps);
RcppExport SEXP _amoc_rcpp_DP_VAR1(SEXP X_futuSEXP, SEXP X_currSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_futu(X_futuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_curr(X_currSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_DP_VAR1(X_futu, X_curr, gamma, lambda, delta, eps));
    return rcpp_result_gen;
END_RCPP
}
// amoc_dp_var1
Rcpp::List amoc_dp_var1(const arma::mat& X_futu, const arma::mat& X_curr, const arma::vec& lambda, int delta, double eps);
RcppExport SEXP _amoc_amoc_dp_var1(SEXP X_futuSEXP, SEXP X_currSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_futu(X_futuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_curr(X_currSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(amoc_dp_var1(X_futu, X_curr, lambda, delta, eps));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_soft_threshold_scalar
double rcpp_soft_threshold_scalar(double x, double lambda);
RcppExport SEXP _amoc_rcpp_soft_threshold_scalar(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_soft_threshold_scalar(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lasso_standardized_obj
double rcpp_lasso_standardized_obj(const arma::mat& Xtilde, const arma::colvec& Ytilde, const arma::colvec& beta, double lambda);
RcppExport SEXP _amoc_rcpp_lasso_standardized_obj(SEXP XtildeSEXP, SEXP YtildeSEXP, SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xtilde(XtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Ytilde(YtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lasso_standardized_obj(Xtilde, Ytilde, beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lasso_standardized
arma::colvec rcpp_lasso_standardized(const arma::mat& Xtilde, const arma::colvec& Ytilde, const arma::colvec& beta_start, double lambda, double eps);
RcppExport SEXP _amoc_rcpp_lasso_standardized(SEXP XtildeSEXP, SEXP YtildeSEXP, SEXP beta_startSEXP, SEXP lambdaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xtilde(XtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Ytilde(YtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta_start(beta_startSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lasso_standardized(Xtilde, Ytilde, beta_start, lambda, eps));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lasso_standardized_seq
arma::mat rcpp_lasso_standardized_seq(const arma::mat& Xtilde, const arma::colvec& Ytilde, const arma::colvec& lambda_seq, double eps);
RcppExport SEXP _amoc_rcpp_lasso_standardized_seq(SEXP XtildeSEXP, SEXP YtildeSEXP, SEXP lambda_seqSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xtilde(XtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Ytilde(YtildeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lasso_standardized_seq(Xtilde, Ytilde, lambda_seq, eps));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_standardizeXY
Rcpp::List rcpp_standardizeXY(const arma::mat& X, const arma::colvec& Y);
RcppExport SEXP _amoc_rcpp_standardizeXY(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_standardizeXY(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lasso_seq
Rcpp::List rcpp_lasso_seq(const arma::mat& X, const arma::colvec& Y, const arma::colvec& lambda_seq, double eps);
RcppExport SEXP _amoc_rcpp_lasso_seq(SEXP XSEXP, SEXP YSEXP, SEXP lambda_seqSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lasso_seq(X, Y, lambda_seq, eps));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _amoc_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _amoc_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _amoc_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _amoc_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_amoc_rcpp_error_pred_seg_VAR1", (DL_FUNC) &_amoc_rcpp_error_pred_seg_VAR1, 7},
    {"_amoc_rcpp_DP_VAR1", (DL_FUNC) &_amoc_rcpp_DP_VAR1, 6},
    {"_amoc_amoc_dp_var1", (DL_FUNC) &_amoc_amoc_dp_var1, 5},
    {"_amoc_rcpp_soft_threshold_scalar", (DL_FUNC) &_amoc_rcpp_soft_threshold_scalar, 2},
    {"_amoc_rcpp_lasso_standardized_obj", (DL_FUNC) &_amoc_rcpp_lasso_standardized_obj, 4},
    {"_amoc_rcpp_lasso_standardized", (DL_FUNC) &_amoc_rcpp_lasso_standardized, 5},
    {"_amoc_rcpp_lasso_standardized_seq", (DL_FUNC) &_amoc_rcpp_lasso_standardized_seq, 4},
    {"_amoc_rcpp_standardizeXY", (DL_FUNC) &_amoc_rcpp_standardizeXY, 2},
    {"_amoc_rcpp_lasso_seq", (DL_FUNC) &_amoc_rcpp_lasso_seq, 4},
    {"_amoc_rcpparma_hello_world", (DL_FUNC) &_amoc_rcpparma_hello_world, 0},
    {"_amoc_rcpparma_outerproduct", (DL_FUNC) &_amoc_rcpparma_outerproduct, 1},
    {"_amoc_rcpparma_innerproduct", (DL_FUNC) &_amoc_rcpparma_innerproduct, 1},
    {"_amoc_rcpparma_bothproducts", (DL_FUNC) &_amoc_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_amoc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
